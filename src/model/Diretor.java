package model;

import java.util.ArrayList;
import java.util.List;

/**
 * Classe Diretor - Representa um diretor no sistema
 * 
 * CONCEITO DE HERAN√áA:
 * Esta classe herda da classe Pessoa usando "extends Pessoa"
 * Isso significa que Diretor tem tudo que Pessoa tem, mais suas pr√≥prias caracter√≠sticas
 * 
 *   EXEMPLO PR√ÅTICO:
 * - James Cameron √© um diretor
 * - Ele tem nome, idade, nacionalidade (herdados de Pessoa)
 * - Ele tem um estilo de dire√ß√£o e uma lista de filmes que dirigiu (espec√≠fico de Diretor)
 * 
 */
public class Diretor extends Pessoa {

    private String estilo; // Estilo de dire√ß√£o (ex: a√ß√£o, drama, com√©dia)
    private List<Filme> filmesDirigidos; // Lista de filmes que o diretor dirigiu

    // ===== CONSTRUTOR =====
    public Diretor(String nome) {
        super(nome);  // Chama o construtor da classe pai (Pessoa)
        this.filmesDirigidos = new ArrayList<>();  // Inicializa a lista vazia
    }

    // ===== M√âTODOS =====
    public String getEstilo() {
        return estilo;
    }
    public void setEstilo(String estilo) {
        this.estilo = estilo != null ? estilo.trim() : null;
    }
    public List<Filme> getFilmesDirigidos() {
        return new ArrayList<>(filmesDirigidos);
    }
    public void adicionarFilme(Filme filme) {
        // VALIDA√á√ÉO 1: Verificar se o filme n√£o √© null
        if (filme == null) {
            throw new IllegalArgumentException("Erro: Filme n√£o pode ser null!");
        }
        
        // VALIDA√á√ÉO 2: Verificar se o filme j√° n√£o est√° na lista
        if (filmesDirigidos.contains(filme)) {
            throw new IllegalArgumentException("Erro: Filme j√° est√° na lista de filmes dirigidos!");
        }
        
        // Se passou pelas valida√ß√µes, adiciona o filme √† lista
        filmesDirigidos.add(filme);
        System.out.println("Filme '" + filme.getNome() + "' adicionado aos filmes dirigidos!");
    }
    public void removerFilme(Filme filme) {
        // VALIDA√á√ÉO 1: Verificar se o filme n√£o √© null
        if (filme == null) {
            throw new IllegalArgumentException("Erro: Filme n√£o pode ser null!");
        }
        
        // VALIDA√á√ÉO 2: Verificar se o filme existe na lista
        if (!filmesDirigidos.contains(filme)) {
            throw new IllegalArgumentException("Erro: Filme n√£o est√° na lista de filmes dirigidos!");
        }
        
        // Se passou pelas valida√ß√µes, remove o filme da lista
        filmesDirigidos.remove(filme);
        System.out.println("Filme '" + filme.getNome() + "' removido dos filmes dirigidos!");
    }

    @Override
    public boolean validarDados() {
        // VALIDA√á√ÉO 1: Verificar se o nome n√£o √© null ou vazio
        if (getNome() == null || getNome().trim().isEmpty()) {
            System.out.println("Nome inv√°lido!");
            return false; // Nome inv√°lido
        }
        
        // VALIDA√á√ÉO 2: Verificar se a idade √© v√°lida (m√≠nimo 21 anos)
        if (getIdade() != null && getIdade() < 21) {
            System.out.println("Idade muito baixa para diretor profissional!");
            return false; // Idade muito baixa para diretor profissional
        }
        
        // VALIDA√á√ÉO 3: Verificar se a nacionalidade foi informada
        if (getNacionalidade() == null || getNacionalidade().trim().isEmpty()) {
            System.out.println("Nacionalidade n√£o informada!");
            return false; // Nacionalidade n√£o informada
        }
        
        // VALIDA√á√ÉO 4: Verificar se o estilo foi informado (espec√≠fico de diretor)
        if (estilo == null || estilo.trim().isEmpty()) {
            System.out.println("Estilo de dire√ß√£o n√£o informado!");
            return false; // Estilo n√£o informado
        }
        
        // Se passou por todas as valida√ß√µes, os dados est√£o corretos
        System.out.println("Dados do diretor est√£o v√°lidos!");
        return true;
    }
    @Override
    public String exibirInformacoes() {
        // StringBuilder √© mais eficiente que concatenar strings com "+"
        StringBuilder informacoes = new StringBuilder();
        
        // Adicionamos as informa√ß√µes b√°sicas (herdadas de Pessoa)
        informacoes.append("üé¨ DIRETOR\n");
        informacoes.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
        informacoes.append("ID: ").append(getId()).append("\n");
        informacoes.append("Nome: ").append(getNome()).append("\n");
        
        // Adicionamos idade (se informada)
        if (getIdade() != null) {
            informacoes.append("Idade: ").append(getIdade()).append(" anos\n");
        } else {
            informacoes.append("Idade: N√£o informada\n");
        }
        
        // Adicionamos nacionalidade (se informada)
        if (getNacionalidade() != null && !getNacionalidade().trim().isEmpty()) {
            informacoes.append("Nacionalidade: ").append(getNacionalidade()).append("\n");
        } else {
            informacoes.append("Nacionalidade: N√£o informada\n");
        }
        
        // Adicionamos informa√ß√µes espec√≠ficas do diretor (estilo)
        if (estilo != null && !estilo.trim().isEmpty()) {
            informacoes.append("Estilo: ").append(estilo).append("\n");
        } else {
            informacoes.append("Estilo: N√£o informado\n");
        }
        
        // Adicionamos informa√ß√µes espec√≠ficas do diretor (filmes dirigidos)
        informacoes.append("Filmes Dirigidos: ");
        if (filmesDirigidos.isEmpty()) {
            informacoes.append("Nenhum filme registrado\n");
        } else {
            informacoes.append(filmesDirigidos.size()).append(" filme(s)\n");
            // üéØ Listamos os filmes numerados usando um loop for
            for (int i = 0; i < filmesDirigidos.size(); i++) {
                Filme filme = filmesDirigidos.get(i);
                informacoes.append("  ").append(i + 1).append(". ").append(filme.getNome());
                if (filme.getDataLancamento() != null) {
                    informacoes.append(" (").append(filme.getDataLancamento().getYear()).append(")");
                }
                informacoes.append("\n");
            }
        }
        
        // Retornamos a string completa
        return informacoes.toString();
    }

    @Override
    public String toString() {
        return "Diretor{" +
                "id=" + getId() +
                ", nome='" + getNome() + '\'' +
                ", estilo='" + estilo + '\'' +
                ", filmes=" + filmesDirigidos.size() + " filme(s)" +
                '}';
    }

    // ===== M√âTODOS ADICIONAIS √öTEIS =====

    public int contarFilmes() {
        return filmesDirigidos.size();
    }
    public boolean dirigiuFilme(Filme filme) {
        return filmesDirigidos.contains(filme);
    }

    public void limparFilmes() {
        filmesDirigidos.clear();
        System.out.println("Lista de filmes dirigidos limpa!");
    }

    public boolean definirEstilo(String estilo) {
        if (estilo == null || estilo.trim().isEmpty()) {
            System.out.println("Estilo n√£o pode ser vazio!");
            return false;
        }
        
        this.estilo = estilo.trim();
        System.out.println("Estilo definido como: " + this.estilo);
        return true;
    }
}
